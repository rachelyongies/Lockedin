/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Fusion1inchBitcoinBridge {
  export type FusionHTLCStruct = {
    initiator: AddressLike;
    resolver: AddressLike;
    totalAmount: BigNumberish;
    filledAmount: BigNumberish;
    secretHash: BytesLike;
    timelock: BigNumberish;
    executed: boolean;
    refunded: boolean;
    partialFillsEnabled: boolean;
    fromToken: AddressLike;
    toToken: AddressLike;
    minToAmount: BigNumberish;
    fusionOrderId: BytesLike;
    createdAt: BigNumberish;
    fillHashes: BytesLike[];
  };

  export type FusionHTLCStructOutput = [
    initiator: string,
    resolver: string,
    totalAmount: bigint,
    filledAmount: bigint,
    secretHash: string,
    timelock: bigint,
    executed: boolean,
    refunded: boolean,
    partialFillsEnabled: boolean,
    fromToken: string,
    toToken: string,
    minToAmount: bigint,
    fusionOrderId: string,
    createdAt: bigint,
    fillHashes: string[]
  ] & {
    initiator: string;
    resolver: string;
    totalAmount: bigint;
    filledAmount: bigint;
    secretHash: string;
    timelock: bigint;
    executed: boolean;
    refunded: boolean;
    partialFillsEnabled: boolean;
    fromToken: string;
    toToken: string;
    minToAmount: bigint;
    fusionOrderId: string;
    createdAt: bigint;
    fillHashes: string[];
  };
}

export interface Fusion1inchBitcoinBridgeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "authorizeResolver"
      | "authorizedResolvers"
      | "bitcoinHTLCAddresses"
      | "deactivateRelayer"
      | "deauthorizeResolver"
      | "depositTokens"
      | "emergencyWithdraw"
      | "fillCounts"
      | "fusionProtocol"
      | "getBitcoinHTLCAddress"
      | "getFillPercentage"
      | "getHTLC"
      | "getHTLCFills"
      | "getRemainingAmount"
      | "htlcs"
      | "initiateFusionHTLC"
      | "isHTLCActive"
      | "maxPartialFills"
      | "maxTimelock"
      | "minStakeAmount"
      | "minTimelock"
      | "owner"
      | "pause"
      | "paused"
      | "redeemHTLC"
      | "refundHTLC"
      | "registerRelayer"
      | "relayerRedeem"
      | "relayerRewardRate"
      | "relayers"
      | "renounceOwnership"
      | "setFusionProtocol"
      | "setMaxPartialFills"
      | "setMinStakeAmount"
      | "setRelayerRewardRate"
      | "setTimelockLimits"
      | "transferOwnership"
      | "unpause"
      | "usedSecrets"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FusionOrderCreated"
      | "HTLCInitiated"
      | "HTLCRedeemed"
      | "HTLCRefunded"
      | "OwnershipTransferred"
      | "PartialFill"
      | "Paused"
      | "RelayerReward"
      | "ResolverRegistered"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "authorizeResolver",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedResolvers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bitcoinHTLCAddresses",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateRelayer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deauthorizeResolver",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositTokens",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fillCounts",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fusionProtocol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBitcoinHTLCAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFillPercentage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getHTLC", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getHTLCFills",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingAmount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "htlcs", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "initiateFusionHTLC",
    values: [
      BytesLike,
      AddressLike,
      BytesLike,
      BigNumberish,
      AddressLike,
      AddressLike,
      BigNumberish,
      boolean,
      BytesLike,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isHTLCActive",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxPartialFills",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTimelock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minStakeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minTimelock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemHTLC",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "refundHTLC",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRelayer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "relayerRedeem",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "relayerRewardRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "relayers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFusionProtocol",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPartialFills",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinStakeAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRelayerRewardRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimelockLimits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "usedSecrets",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "authorizeResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedResolvers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bitcoinHTLCAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deauthorizeResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fillCounts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fusionProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBitcoinHTLCAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFillPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHTLC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getHTLCFills",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "htlcs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateFusionHTLC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isHTLCActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPartialFills",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeemHTLC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refundHTLC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayerRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayerRewardRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "relayers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFusionProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPartialFills",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRelayerRewardRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimelockLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "usedSecrets",
    data: BytesLike
  ): Result;
}

export namespace FusionOrderCreatedEvent {
  export type InputTuple = [
    htlcId: BytesLike,
    fusionOrderId: BytesLike,
    fromToken: AddressLike,
    toToken: AddressLike,
    fromAmount: BigNumberish,
    minToAmount: BigNumberish
  ];
  export type OutputTuple = [
    htlcId: string,
    fusionOrderId: string,
    fromToken: string,
    toToken: string,
    fromAmount: bigint,
    minToAmount: bigint
  ];
  export interface OutputObject {
    htlcId: string;
    fusionOrderId: string;
    fromToken: string;
    toToken: string;
    fromAmount: bigint;
    minToAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HTLCInitiatedEvent {
  export type InputTuple = [
    id: BytesLike,
    initiator: AddressLike,
    resolver: AddressLike,
    amount: BigNumberish,
    secretHash: BytesLike,
    timelock: BigNumberish,
    partialFillsEnabled: boolean,
    bitcoinHTLCAddress: string
  ];
  export type OutputTuple = [
    id: string,
    initiator: string,
    resolver: string,
    amount: bigint,
    secretHash: string,
    timelock: bigint,
    partialFillsEnabled: boolean,
    bitcoinHTLCAddress: string
  ];
  export interface OutputObject {
    id: string;
    initiator: string;
    resolver: string;
    amount: bigint;
    secretHash: string;
    timelock: bigint;
    partialFillsEnabled: boolean;
    bitcoinHTLCAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HTLCRedeemedEvent {
  export type InputTuple = [
    id: BytesLike,
    secretHash: BytesLike,
    preimage: BytesLike,
    amount: BigNumberish,
    resolver: AddressLike
  ];
  export type OutputTuple = [
    id: string,
    secretHash: string,
    preimage: string,
    amount: bigint,
    resolver: string
  ];
  export interface OutputObject {
    id: string;
    secretHash: string;
    preimage: string;
    amount: bigint;
    resolver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HTLCRefundedEvent {
  export type InputTuple = [
    id: BytesLike,
    amount: BigNumberish,
    initiator: AddressLike
  ];
  export type OutputTuple = [id: string, amount: bigint, initiator: string];
  export interface OutputObject {
    id: string;
    amount: bigint;
    initiator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PartialFillEvent {
  export type InputTuple = [
    id: BytesLike,
    fillAmount: BigNumberish,
    remainingAmount: BigNumberish,
    filler: AddressLike,
    fillHash: BytesLike
  ];
  export type OutputTuple = [
    id: string,
    fillAmount: bigint,
    remainingAmount: bigint,
    filler: string,
    fillHash: string
  ];
  export interface OutputObject {
    id: string;
    fillAmount: bigint;
    remainingAmount: bigint;
    filler: string;
    fillHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RelayerRewardEvent {
  export type InputTuple = [relayer: AddressLike, reward: BigNumberish];
  export type OutputTuple = [relayer: string, reward: bigint];
  export interface OutputObject {
    relayer: string;
    reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResolverRegisteredEvent {
  export type InputTuple = [resolver: AddressLike, active: boolean];
  export type OutputTuple = [resolver: string, active: boolean];
  export interface OutputObject {
    resolver: string;
    active: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Fusion1inchBitcoinBridge extends BaseContract {
  connect(runner?: ContractRunner | null): Fusion1inchBitcoinBridge;
  waitForDeployment(): Promise<this>;

  interface: Fusion1inchBitcoinBridgeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authorizeResolver: TypedContractMethod<
    [resolver: AddressLike],
    [void],
    "nonpayable"
  >;

  authorizedResolvers: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  bitcoinHTLCAddresses: TypedContractMethod<
    [arg0: BytesLike],
    [string],
    "view"
  >;

  deactivateRelayer: TypedContractMethod<
    [relayer: AddressLike],
    [void],
    "nonpayable"
  >;

  deauthorizeResolver: TypedContractMethod<
    [resolver: AddressLike],
    [void],
    "nonpayable"
  >;

  depositTokens: TypedContractMethod<
    [id: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  emergencyWithdraw: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  fillCounts: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  fusionProtocol: TypedContractMethod<[], [string], "view">;

  getBitcoinHTLCAddress: TypedContractMethod<[id: BytesLike], [string], "view">;

  getFillPercentage: TypedContractMethod<[id: BytesLike], [bigint], "view">;

  getHTLC: TypedContractMethod<
    [id: BytesLike],
    [Fusion1inchBitcoinBridge.FusionHTLCStructOutput],
    "view"
  >;

  getHTLCFills: TypedContractMethod<[id: BytesLike], [string[]], "view">;

  getRemainingAmount: TypedContractMethod<[id: BytesLike], [bigint], "view">;

  htlcs: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        bigint,
        bigint,
        string,
        bigint,
        boolean,
        boolean,
        boolean,
        string,
        string,
        bigint,
        string,
        bigint
      ] & {
        initiator: string;
        resolver: string;
        totalAmount: bigint;
        filledAmount: bigint;
        secretHash: string;
        timelock: bigint;
        executed: boolean;
        refunded: boolean;
        partialFillsEnabled: boolean;
        fromToken: string;
        toToken: string;
        minToAmount: bigint;
        fusionOrderId: string;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  initiateFusionHTLC: TypedContractMethod<
    [
      id: BytesLike,
      _resolver: AddressLike,
      _secretHash: BytesLike,
      _timelock: BigNumberish,
      _fromToken: AddressLike,
      _toToken: AddressLike,
      _minToAmount: BigNumberish,
      _partialFillsEnabled: boolean,
      _fusionOrderId: BytesLike,
      _bitcoinHTLCAddress: string
    ],
    [void],
    "payable"
  >;

  isHTLCActive: TypedContractMethod<[id: BytesLike], [boolean], "view">;

  maxPartialFills: TypedContractMethod<[], [bigint], "view">;

  maxTimelock: TypedContractMethod<[], [bigint], "view">;

  minStakeAmount: TypedContractMethod<[], [bigint], "view">;

  minTimelock: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  redeemHTLC: TypedContractMethod<
    [id: BytesLike, _preimage: BytesLike, fillAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  refundHTLC: TypedContractMethod<[id: BytesLike], [void], "nonpayable">;

  registerRelayer: TypedContractMethod<[], [void], "payable">;

  relayerRedeem: TypedContractMethod<
    [id: BytesLike, _preimage: BytesLike, fillAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  relayerRewardRate: TypedContractMethod<[], [bigint], "view">;

  relayers: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint, bigint, bigint] & {
        active: boolean;
        stake: bigint;
        successCount: bigint;
        failureCount: bigint;
        lastActiveTime: bigint;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setFusionProtocol: TypedContractMethod<
    [_fusionProtocol: AddressLike],
    [void],
    "nonpayable"
  >;

  setMaxPartialFills: TypedContractMethod<
    [_max: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinStakeAmount: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRelayerRewardRate: TypedContractMethod<
    [_rate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTimelockLimits: TypedContractMethod<
    [_min: BigNumberish, _max: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  usedSecrets: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authorizeResolver"
  ): TypedContractMethod<[resolver: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedResolvers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "bitcoinHTLCAddresses"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "deactivateRelayer"
  ): TypedContractMethod<[relayer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deauthorizeResolver"
  ): TypedContractMethod<[resolver: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "depositTokens"
  ): TypedContractMethod<
    [id: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fillCounts"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "fusionProtocol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBitcoinHTLCAddress"
  ): TypedContractMethod<[id: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getFillPercentage"
  ): TypedContractMethod<[id: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getHTLC"
  ): TypedContractMethod<
    [id: BytesLike],
    [Fusion1inchBitcoinBridge.FusionHTLCStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getHTLCFills"
  ): TypedContractMethod<[id: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRemainingAmount"
  ): TypedContractMethod<[id: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "htlcs"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        bigint,
        bigint,
        string,
        bigint,
        boolean,
        boolean,
        boolean,
        string,
        string,
        bigint,
        string,
        bigint
      ] & {
        initiator: string;
        resolver: string;
        totalAmount: bigint;
        filledAmount: bigint;
        secretHash: string;
        timelock: bigint;
        executed: boolean;
        refunded: boolean;
        partialFillsEnabled: boolean;
        fromToken: string;
        toToken: string;
        minToAmount: bigint;
        fusionOrderId: string;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "initiateFusionHTLC"
  ): TypedContractMethod<
    [
      id: BytesLike,
      _resolver: AddressLike,
      _secretHash: BytesLike,
      _timelock: BigNumberish,
      _fromToken: AddressLike,
      _toToken: AddressLike,
      _minToAmount: BigNumberish,
      _partialFillsEnabled: boolean,
      _fusionOrderId: BytesLike,
      _bitcoinHTLCAddress: string
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "isHTLCActive"
  ): TypedContractMethod<[id: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxPartialFills"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxTimelock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minStakeAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minTimelock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "redeemHTLC"
  ): TypedContractMethod<
    [id: BytesLike, _preimage: BytesLike, fillAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "refundHTLC"
  ): TypedContractMethod<[id: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerRelayer"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "relayerRedeem"
  ): TypedContractMethod<
    [id: BytesLike, _preimage: BytesLike, fillAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "relayerRewardRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "relayers"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint, bigint, bigint] & {
        active: boolean;
        stake: bigint;
        successCount: bigint;
        failureCount: bigint;
        lastActiveTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFusionProtocol"
  ): TypedContractMethod<[_fusionProtocol: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxPartialFills"
  ): TypedContractMethod<[_max: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinStakeAmount"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRelayerRewardRate"
  ): TypedContractMethod<[_rate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTimelockLimits"
  ): TypedContractMethod<
    [_min: BigNumberish, _max: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usedSecrets"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  getEvent(
    key: "FusionOrderCreated"
  ): TypedContractEvent<
    FusionOrderCreatedEvent.InputTuple,
    FusionOrderCreatedEvent.OutputTuple,
    FusionOrderCreatedEvent.OutputObject
  >;
  getEvent(
    key: "HTLCInitiated"
  ): TypedContractEvent<
    HTLCInitiatedEvent.InputTuple,
    HTLCInitiatedEvent.OutputTuple,
    HTLCInitiatedEvent.OutputObject
  >;
  getEvent(
    key: "HTLCRedeemed"
  ): TypedContractEvent<
    HTLCRedeemedEvent.InputTuple,
    HTLCRedeemedEvent.OutputTuple,
    HTLCRedeemedEvent.OutputObject
  >;
  getEvent(
    key: "HTLCRefunded"
  ): TypedContractEvent<
    HTLCRefundedEvent.InputTuple,
    HTLCRefundedEvent.OutputTuple,
    HTLCRefundedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PartialFill"
  ): TypedContractEvent<
    PartialFillEvent.InputTuple,
    PartialFillEvent.OutputTuple,
    PartialFillEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RelayerReward"
  ): TypedContractEvent<
    RelayerRewardEvent.InputTuple,
    RelayerRewardEvent.OutputTuple,
    RelayerRewardEvent.OutputObject
  >;
  getEvent(
    key: "ResolverRegistered"
  ): TypedContractEvent<
    ResolverRegisteredEvent.InputTuple,
    ResolverRegisteredEvent.OutputTuple,
    ResolverRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "FusionOrderCreated(bytes32,bytes32,address,address,uint256,uint256)": TypedContractEvent<
      FusionOrderCreatedEvent.InputTuple,
      FusionOrderCreatedEvent.OutputTuple,
      FusionOrderCreatedEvent.OutputObject
    >;
    FusionOrderCreated: TypedContractEvent<
      FusionOrderCreatedEvent.InputTuple,
      FusionOrderCreatedEvent.OutputTuple,
      FusionOrderCreatedEvent.OutputObject
    >;

    "HTLCInitiated(bytes32,address,address,uint256,bytes32,uint256,bool,string)": TypedContractEvent<
      HTLCInitiatedEvent.InputTuple,
      HTLCInitiatedEvent.OutputTuple,
      HTLCInitiatedEvent.OutputObject
    >;
    HTLCInitiated: TypedContractEvent<
      HTLCInitiatedEvent.InputTuple,
      HTLCInitiatedEvent.OutputTuple,
      HTLCInitiatedEvent.OutputObject
    >;

    "HTLCRedeemed(bytes32,bytes32,bytes32,uint256,address)": TypedContractEvent<
      HTLCRedeemedEvent.InputTuple,
      HTLCRedeemedEvent.OutputTuple,
      HTLCRedeemedEvent.OutputObject
    >;
    HTLCRedeemed: TypedContractEvent<
      HTLCRedeemedEvent.InputTuple,
      HTLCRedeemedEvent.OutputTuple,
      HTLCRedeemedEvent.OutputObject
    >;

    "HTLCRefunded(bytes32,uint256,address)": TypedContractEvent<
      HTLCRefundedEvent.InputTuple,
      HTLCRefundedEvent.OutputTuple,
      HTLCRefundedEvent.OutputObject
    >;
    HTLCRefunded: TypedContractEvent<
      HTLCRefundedEvent.InputTuple,
      HTLCRefundedEvent.OutputTuple,
      HTLCRefundedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PartialFill(bytes32,uint256,uint256,address,bytes32)": TypedContractEvent<
      PartialFillEvent.InputTuple,
      PartialFillEvent.OutputTuple,
      PartialFillEvent.OutputObject
    >;
    PartialFill: TypedContractEvent<
      PartialFillEvent.InputTuple,
      PartialFillEvent.OutputTuple,
      PartialFillEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RelayerReward(address,uint256)": TypedContractEvent<
      RelayerRewardEvent.InputTuple,
      RelayerRewardEvent.OutputTuple,
      RelayerRewardEvent.OutputObject
    >;
    RelayerReward: TypedContractEvent<
      RelayerRewardEvent.InputTuple,
      RelayerRewardEvent.OutputTuple,
      RelayerRewardEvent.OutputObject
    >;

    "ResolverRegistered(address,bool)": TypedContractEvent<
      ResolverRegisteredEvent.InputTuple,
      ResolverRegisteredEvent.OutputTuple,
      ResolverRegisteredEvent.OutputObject
    >;
    ResolverRegistered: TypedContractEvent<
      ResolverRegisteredEvent.InputTuple,
      ResolverRegisteredEvent.OutputTuple,
      ResolverRegisteredEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
