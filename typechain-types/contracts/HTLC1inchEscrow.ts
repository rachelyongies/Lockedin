/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace HTLC1inchEscrow {
  export type HTLCStruct = {
    initiator: AddressLike;
    resolver: AddressLike;
    fromToken: AddressLike;
    toToken: AddressLike;
    amount: BigNumberish;
    expectedAmount: BigNumberish;
    secretHash: BytesLike;
    timelock: BigNumberish;
    executed: boolean;
    refunded: boolean;
    orderId: string;
    orderSubmitted: boolean;
  };

  export type HTLCStructOutput = [
    initiator: string,
    resolver: string,
    fromToken: string,
    toToken: string,
    amount: bigint,
    expectedAmount: bigint,
    secretHash: string,
    timelock: bigint,
    executed: boolean,
    refunded: boolean,
    orderId: string,
    orderSubmitted: boolean
  ] & {
    initiator: string;
    resolver: string;
    fromToken: string;
    toToken: string;
    amount: bigint;
    expectedAmount: bigint;
    secretHash: string;
    timelock: bigint;
    executed: boolean;
    refunded: boolean;
    orderId: string;
    orderSubmitted: boolean;
  };
}

export interface HTLC1inchEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FEE_DENOMINATOR"
      | "collectedFees"
      | "createHTLC"
      | "emergencyRecover"
      | "executeHTLC"
      | "executeHTLCWithSwap"
      | "feeCollector"
      | "fusionRelayer"
      | "getHTLC"
      | "htlcContracts"
      | "htlcExistsMap"
      | "maxTimelock"
      | "minTimelock"
      | "owner"
      | "protocolFee"
      | "refundHTLC"
      | "renounceOwnership"
      | "setFeeCollector"
      | "setFusionRelayer"
      | "setProtocolFee"
      | "setTimelockLimits"
      | "submitOrder"
      | "transferOwnership"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "HTLCCreated"
      | "HTLCExecuted"
      | "HTLCRefunded"
      | "OrderExecuted"
      | "OrderSubmitted"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectedFees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createHTLC",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyRecover",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeHTLC",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeHTLCWithSwap",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fusionRelayer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getHTLC", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "htlcContracts",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "htlcExistsMap",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxTimelock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minTimelock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refundHTLC",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeCollector",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFusionRelayer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimelockLimits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitOrder",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createHTLC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyRecover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeHTLC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeHTLCWithSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fusionRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHTLC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "htlcContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "htlcExistsMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refundHTLC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFusionRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimelockLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace HTLCCreatedEvent {
  export type InputTuple = [
    htlcId: BytesLike,
    initiator: AddressLike,
    resolver: AddressLike,
    fromToken: AddressLike,
    toToken: AddressLike,
    amount: BigNumberish,
    expectedAmount: BigNumberish,
    secretHash: BytesLike,
    timelock: BigNumberish
  ];
  export type OutputTuple = [
    htlcId: string,
    initiator: string,
    resolver: string,
    fromToken: string,
    toToken: string,
    amount: bigint,
    expectedAmount: bigint,
    secretHash: string,
    timelock: bigint
  ];
  export interface OutputObject {
    htlcId: string;
    initiator: string;
    resolver: string;
    fromToken: string;
    toToken: string;
    amount: bigint;
    expectedAmount: bigint;
    secretHash: string;
    timelock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HTLCExecutedEvent {
  export type InputTuple = [
    htlcId: BytesLike,
    resolver: AddressLike,
    secret: BytesLike,
    actualAmount: BigNumberish
  ];
  export type OutputTuple = [
    htlcId: string,
    resolver: string,
    secret: string,
    actualAmount: bigint
  ];
  export interface OutputObject {
    htlcId: string;
    resolver: string;
    secret: string;
    actualAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HTLCRefundedEvent {
  export type InputTuple = [htlcId: BytesLike, initiator: AddressLike];
  export type OutputTuple = [htlcId: string, initiator: string];
  export interface OutputObject {
    htlcId: string;
    initiator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderExecutedEvent {
  export type InputTuple = [
    htlcId: BytesLike,
    orderId: string,
    actualAmount: BigNumberish
  ];
  export type OutputTuple = [
    htlcId: string,
    orderId: string,
    actualAmount: bigint
  ];
  export interface OutputObject {
    htlcId: string;
    orderId: string;
    actualAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderSubmittedEvent {
  export type InputTuple = [
    htlcId: BytesLike,
    orderId: string,
    initiator: AddressLike
  ];
  export type OutputTuple = [
    htlcId: string,
    orderId: string,
    initiator: string
  ];
  export interface OutputObject {
    htlcId: string;
    orderId: string;
    initiator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HTLC1inchEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): HTLC1inchEscrow;
  waitForDeployment(): Promise<this>;

  interface: HTLC1inchEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FEE_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  collectedFees: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  createHTLC: TypedContractMethod<
    [
      resolver: AddressLike,
      fromToken: AddressLike,
      toToken: AddressLike,
      amount: BigNumberish,
      expectedAmount: BigNumberish,
      secretHash: BytesLike,
      timelock: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  emergencyRecover: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeHTLC: TypedContractMethod<
    [htlcId: BytesLike, secret: BytesLike],
    [void],
    "nonpayable"
  >;

  executeHTLCWithSwap: TypedContractMethod<
    [htlcId: BytesLike, secret: BytesLike, actualAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  feeCollector: TypedContractMethod<[], [string], "view">;

  fusionRelayer: TypedContractMethod<[], [string], "view">;

  getHTLC: TypedContractMethod<
    [htlcId: BytesLike],
    [HTLC1inchEscrow.HTLCStructOutput],
    "view"
  >;

  htlcContracts: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        bigint,
        boolean,
        boolean,
        string,
        boolean
      ] & {
        initiator: string;
        resolver: string;
        fromToken: string;
        toToken: string;
        amount: bigint;
        expectedAmount: bigint;
        secretHash: string;
        timelock: bigint;
        executed: boolean;
        refunded: boolean;
        orderId: string;
        orderSubmitted: boolean;
      }
    ],
    "view"
  >;

  htlcExistsMap: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  maxTimelock: TypedContractMethod<[], [bigint], "view">;

  minTimelock: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  protocolFee: TypedContractMethod<[], [bigint], "view">;

  refundHTLC: TypedContractMethod<[htlcId: BytesLike], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setFeeCollector: TypedContractMethod<
    [_feeCollector: AddressLike],
    [void],
    "nonpayable"
  >;

  setFusionRelayer: TypedContractMethod<
    [_fusionRelayer: AddressLike],
    [void],
    "nonpayable"
  >;

  setProtocolFee: TypedContractMethod<
    [_protocolFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTimelockLimits: TypedContractMethod<
    [_minTimelock: BigNumberish, _maxTimelock: BigNumberish],
    [void],
    "nonpayable"
  >;

  submitOrder: TypedContractMethod<
    [htlcId: BytesLike, orderId: string],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawFees: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FEE_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "collectedFees"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "createHTLC"
  ): TypedContractMethod<
    [
      resolver: AddressLike,
      fromToken: AddressLike,
      toToken: AddressLike,
      amount: BigNumberish,
      expectedAmount: BigNumberish,
      secretHash: BytesLike,
      timelock: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyRecover"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeHTLC"
  ): TypedContractMethod<
    [htlcId: BytesLike, secret: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeHTLCWithSwap"
  ): TypedContractMethod<
    [htlcId: BytesLike, secret: BytesLike, actualAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feeCollector"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fusionRelayer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getHTLC"
  ): TypedContractMethod<
    [htlcId: BytesLike],
    [HTLC1inchEscrow.HTLCStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "htlcContracts"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        bigint,
        boolean,
        boolean,
        string,
        boolean
      ] & {
        initiator: string;
        resolver: string;
        fromToken: string;
        toToken: string;
        amount: bigint;
        expectedAmount: bigint;
        secretHash: string;
        timelock: bigint;
        executed: boolean;
        refunded: boolean;
        orderId: string;
        orderSubmitted: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "htlcExistsMap"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxTimelock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minTimelock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "refundHTLC"
  ): TypedContractMethod<[htlcId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeCollector"
  ): TypedContractMethod<[_feeCollector: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFusionRelayer"
  ): TypedContractMethod<[_fusionRelayer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProtocolFee"
  ): TypedContractMethod<[_protocolFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTimelockLimits"
  ): TypedContractMethod<
    [_minTimelock: BigNumberish, _maxTimelock: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitOrder"
  ): TypedContractMethod<
    [htlcId: BytesLike, orderId: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "HTLCCreated"
  ): TypedContractEvent<
    HTLCCreatedEvent.InputTuple,
    HTLCCreatedEvent.OutputTuple,
    HTLCCreatedEvent.OutputObject
  >;
  getEvent(
    key: "HTLCExecuted"
  ): TypedContractEvent<
    HTLCExecutedEvent.InputTuple,
    HTLCExecutedEvent.OutputTuple,
    HTLCExecutedEvent.OutputObject
  >;
  getEvent(
    key: "HTLCRefunded"
  ): TypedContractEvent<
    HTLCRefundedEvent.InputTuple,
    HTLCRefundedEvent.OutputTuple,
    HTLCRefundedEvent.OutputObject
  >;
  getEvent(
    key: "OrderExecuted"
  ): TypedContractEvent<
    OrderExecutedEvent.InputTuple,
    OrderExecutedEvent.OutputTuple,
    OrderExecutedEvent.OutputObject
  >;
  getEvent(
    key: "OrderSubmitted"
  ): TypedContractEvent<
    OrderSubmittedEvent.InputTuple,
    OrderSubmittedEvent.OutputTuple,
    OrderSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "HTLCCreated(bytes32,address,address,address,address,uint256,uint256,bytes32,uint256)": TypedContractEvent<
      HTLCCreatedEvent.InputTuple,
      HTLCCreatedEvent.OutputTuple,
      HTLCCreatedEvent.OutputObject
    >;
    HTLCCreated: TypedContractEvent<
      HTLCCreatedEvent.InputTuple,
      HTLCCreatedEvent.OutputTuple,
      HTLCCreatedEvent.OutputObject
    >;

    "HTLCExecuted(bytes32,address,bytes32,uint256)": TypedContractEvent<
      HTLCExecutedEvent.InputTuple,
      HTLCExecutedEvent.OutputTuple,
      HTLCExecutedEvent.OutputObject
    >;
    HTLCExecuted: TypedContractEvent<
      HTLCExecutedEvent.InputTuple,
      HTLCExecutedEvent.OutputTuple,
      HTLCExecutedEvent.OutputObject
    >;

    "HTLCRefunded(bytes32,address)": TypedContractEvent<
      HTLCRefundedEvent.InputTuple,
      HTLCRefundedEvent.OutputTuple,
      HTLCRefundedEvent.OutputObject
    >;
    HTLCRefunded: TypedContractEvent<
      HTLCRefundedEvent.InputTuple,
      HTLCRefundedEvent.OutputTuple,
      HTLCRefundedEvent.OutputObject
    >;

    "OrderExecuted(bytes32,string,uint256)": TypedContractEvent<
      OrderExecutedEvent.InputTuple,
      OrderExecutedEvent.OutputTuple,
      OrderExecutedEvent.OutputObject
    >;
    OrderExecuted: TypedContractEvent<
      OrderExecutedEvent.InputTuple,
      OrderExecutedEvent.OutputTuple,
      OrderExecutedEvent.OutputObject
    >;

    "OrderSubmitted(bytes32,string,address)": TypedContractEvent<
      OrderSubmittedEvent.InputTuple,
      OrderSubmittedEvent.OutputTuple,
      OrderSubmittedEvent.OutputObject
    >;
    OrderSubmitted: TypedContractEvent<
      OrderSubmittedEvent.InputTuple,
      OrderSubmittedEvent.OutputTuple,
      OrderSubmittedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
